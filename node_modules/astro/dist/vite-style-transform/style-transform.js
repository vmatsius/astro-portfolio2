import { fileURLToPath } from "url";
import { createTransformStyleWithViteFn } from "./transform-with-vite.js";
import { readFileSync } from "fs";
import { AstroErrorCodes } from "../core/errors/codes.js";
import { CSSError } from "../core/errors/errors.js";
import { positionAt } from "../core/errors/index.js";
function createViteStyleTransformer(viteConfig) {
  return {
    transformStyleWithVite: createTransformStyleWithViteFn(viteConfig)
  };
}
function getNormalizedIDForPostCSS(filename) {
  try {
    const filenameURL = new URL(`file://${filename}`);
    return fileURLToPath(filenameURL);
  } catch (err) {
    return filename;
  }
}
function createTransformStyles(viteStyleTransformer, filename, ssr, pluginContext) {
  const normalizedID = getNormalizedIDForPostCSS(filename);
  return async function(styleSource, lang) {
    var _a;
    let result;
    try {
      result = await viteStyleTransformer.transformStyleWithVite.call(pluginContext, {
        id: normalizedID,
        source: styleSource,
        lang,
        ssr,
        viteDevServer: viteStyleTransformer.viteDevServer
      });
    } catch (err) {
      const fileContent = readFileSync(filename).toString();
      const styleTagBeginning = fileContent.indexOf(((_a = err.input) == null ? void 0 : _a.source) ?? err.code);
      if (err.name === "CssSyntaxError") {
        const errorLine = positionAt(styleTagBeginning, fileContent).line + (err.line ?? 0);
        throw new CSSError({
          errorCode: AstroErrorCodes.CssSyntaxError,
          message: err.reason,
          location: {
            file: filename,
            line: errorLine,
            column: err.column
          }
        });
      }
      if (err.line && err.column) {
        const errorLine = positionAt(styleTagBeginning, fileContent).line + (err.line ?? 0);
        throw new CSSError({
          errorCode: AstroErrorCodes.CssUnknownError,
          message: err.message,
          location: {
            file: filename,
            line: errorLine,
            column: err.column
          },
          frame: err.frame
        });
      }
      const errorPosition = positionAt(styleTagBeginning, fileContent);
      errorPosition.line += 1;
      throw new CSSError({
        errorCode: AstroErrorCodes.CssUnknownError,
        message: err.message,
        location: {
          file: filename,
          line: errorPosition.line,
          column: 0
        },
        frame: err.frame
      });
    }
    return result;
  };
}
export {
  createTransformStyles,
  createViteStyleTransformer
};
